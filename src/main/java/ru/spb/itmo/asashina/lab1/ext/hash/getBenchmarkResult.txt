/Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java -javaagent:/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar=50582:/Applications/IntelliJ IDEA.app/Contents/bin -Dfile.encoding=UTF-8 -classpath /Users/a.sashina/IdeaProjects/distributed-algorithms/target/classes:/Users/a.sashina/.m2/repository/org/openjdk/jmh/jmh-core/1.37/jmh-core-1.37.jar:/Users/a.sashina/.m2/repository/net/sf/jopt-simple/jopt-simple/5.0.4/jopt-simple-5.0.4.jar:/Users/a.sashina/.m2/repository/org/apache/commons/commons-math3/3.6.1/commons-math3-3.6.1.jar:/Users/a.sashina/.m2/repository/org/openjdk/jmh/jmh-generator-annprocess/1.37/jmh-generator-annprocess-1.37.jar:/Users/a.sashina/.m2/repository/org/jeasy/easy-random-core/5.0.0/easy-random-core-5.0.0.jar:/Users/a.sashina/.m2/repository/org/objenesis/objenesis/3.1/objenesis-3.1.jar:/Users/a.sashina/.m2/repository/io/github/classgraph/classgraph/4.8.90/classgraph-4.8.90.jar ru.spb.itmo.asashina.lab1.ext.hash.GetBenchmarkRunner
# JMH version: 1.37
# VM version: JDK 17.0.6, OpenJDK 64-Bit Server VM, 17.0.6+10
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -javaagent:/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar=50582:/Applications/IntelliJ IDEA.app/Contents/bin -Dfile.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: ru.spb.itmo.asashina.lab1.ext.hash.GetBenchmarkRunner.getHundredThousandValues

# Run progress: 0,00% complete, ETA 00:01:57
# Warmup Fork: 1 of 1
# Warmup Iteration   1: 2021,404 ms/op
# Warmup Iteration   2: 4295,849 ms/op
# Warmup Iteration   3: 3824,209 ms/op
Iteration   1: 3132,357 ms/op
Iteration   2: 5083,544 ms/op
Iteration   3: 4436,947 ms/op
Iteration   4: 2539,451 ms/op
Iteration   5: 4400,750 ms/op
Iteration   6: 4639,640 ms/op
Iteration   7: 4417,098 ms/op
Iteration   8: 4375,697 ms/op
Iteration   9: 4568,320 ms/op
Iteration  10: 4728,367 ms/op

# Run progress: 11,11% complete, ETA 00:07:08
# Fork: 1 of 2
# Warmup Iteration   1: 2057,534 ms/op
# Warmup Iteration   2: 4439,447 ms/op
# Warmup Iteration   3: 4050,212 ms/op
Iteration   1: 4356,359 ms/op
Iteration   2: 3880,382 ms/op
Iteration   3: 4679,398 ms/op
Iteration   4: 4406,519 ms/op
Iteration   5: 4725,926 ms/op
Iteration   6: 4221,663 ms/op
Iteration   7: 4537,998 ms/op
Iteration   8: 4468,176 ms/op
Iteration   9: 4410,493 ms/op
Iteration  10: 4197,501 ms/op

# Run progress: 22,22% complete, ETA 00:06:21
# Fork: 2 of 2
# Warmup Iteration   1: 1987,873 ms/op
# Warmup Iteration   2: 4537,939 ms/op
# Warmup Iteration   3: 4345,579 ms/op
Iteration   1: 4502,976 ms/op
Iteration   2: 4078,208 ms/op
Iteration   3: 4188,143 ms/op
Iteration   4: 5032,788 ms/op
Iteration   5: 4344,654 ms/op
Iteration   6: 4385,112 ms/op
Iteration   7: 4332,611 ms/op
Iteration   8: 4751,751 ms/op
Iteration   9: 4365,645 ms/op
Iteration  10: 4511,528 ms/op


Result "ru.spb.itmo.asashina.lab1.ext.hash.GetBenchmarkRunner.getHundredThousandValues":
  4418,892 ±(99.9%) 222,759 ms/op [Average]
  (min, avg, max) = (3880,382, 4418,892, 5032,788), stdev = 256,530
  CI (99.9%): [4196,132, 4641,651] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 17.0.6, OpenJDK 64-Bit Server VM, 17.0.6+10
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -javaagent:/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar=50582:/Applications/IntelliJ IDEA.app/Contents/bin -Dfile.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: ru.spb.itmo.asashina.lab1.ext.hash.GetBenchmarkRunner.getTenThousandValues

# Run progress: 33,33% complete, ETA 00:05:31
# Warmup Fork: 1 of 1
# Warmup Iteration   1: 0,259 ms/op
# Warmup Iteration   2: 0,243 ms/op
# Warmup Iteration   3: 0,240 ms/op
Iteration   1: 0,237 ms/op
Iteration   2: 0,234 ms/op
Iteration   3: 0,254 ms/op
Iteration   4: 0,273 ms/op
Iteration   5: 0,262 ms/op
Iteration   6: 0,246 ms/op
Iteration   7: 0,254 ms/op
Iteration   8: 0,251 ms/op
Iteration   9: 0,264 ms/op
Iteration  10: 0,241 ms/op

# Run progress: 44,44% complete, ETA 00:03:44
# Fork: 1 of 2
# Warmup Iteration   1: 0,247 ms/op
# Warmup Iteration   2: 0,230 ms/op
# Warmup Iteration   3: 0,237 ms/op
Iteration   1: 0,225 ms/op
Iteration   2: 0,243 ms/op
Iteration   3: 0,233 ms/op
Iteration   4: 0,229 ms/op
Iteration   5: 0,220 ms/op
Iteration   6: 0,232 ms/op
Iteration   7: 0,241 ms/op
Iteration   8: 0,234 ms/op
Iteration   9: 0,222 ms/op
Iteration  10: 0,220 ms/op

# Run progress: 55,56% complete, ETA 00:02:34
# Fork: 2 of 2
# Warmup Iteration   1: 0,268 ms/op
# Warmup Iteration   2: 0,291 ms/op
# Warmup Iteration   3: 0,298 ms/op
Iteration   1: 0,282 ms/op
Iteration   2: 0,284 ms/op
Iteration   3: 0,248 ms/op
Iteration   4: 0,262 ms/op
Iteration   5: 0,245 ms/op
Iteration   6: 0,250 ms/op
Iteration   7: 0,243 ms/op
Iteration   8: 0,249 ms/op
Iteration   9: 0,260 ms/op
Iteration  10: 0,240 ms/op


Result "ru.spb.itmo.asashina.lab1.ext.hash.GetBenchmarkRunner.getTenThousandValues":
  0,243 ±(99.9%) 0,016 ms/op [Average]
  (min, avg, max) = (0,220, 0,243, 0,284), stdev = 0,018
  CI (99.9%): [0,227, 0,259] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 17.0.6, OpenJDK 64-Bit Server VM, 17.0.6+10
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -javaagent:/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar=50582:/Applications/IntelliJ IDEA.app/Contents/bin -Dfile.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: ru.spb.itmo.asashina.lab1.ext.hash.GetBenchmarkRunner.getThousandValues

# Run progress: 66,67% complete, ETA 00:01:43
# Warmup Fork: 1 of 1
# Warmup Iteration   1: 0,244 ms/op
# Warmup Iteration   2: 0,244 ms/op
# Warmup Iteration   3: 0,256 ms/op
Iteration   1: 0,265 ms/op
Iteration   2: 0,267 ms/op
Iteration   3: 0,270 ms/op
Iteration   4: 0,270 ms/op
Iteration   5: 0,276 ms/op
Iteration   6: 0,265 ms/op
Iteration   7: 0,260 ms/op
Iteration   8: 0,256 ms/op
Iteration   9: 0,262 ms/op
Iteration  10: 0,250 ms/op

# Run progress: 77,78% complete, ETA 00:01:03
# Fork: 1 of 2
# Warmup Iteration   1: 0,222 ms/op
# Warmup Iteration   2: 0,240 ms/op
# Warmup Iteration   3: 0,231 ms/op
Iteration   1: 0,235 ms/op
Iteration   2: 0,239 ms/op
Iteration   3: 0,228 ms/op
Iteration   4: 0,230 ms/op
Iteration   5: 0,217 ms/op
Iteration   6: 0,223 ms/op
Iteration   7: 0,208 ms/op
Iteration   8: 0,231 ms/op
Iteration   9: 0,258 ms/op
Iteration  10: 0,239 ms/op

# Run progress: 88,89% complete, ETA 00:00:29
# Fork: 2 of 2
# Warmup Iteration   1: 0,254 ms/op
# Warmup Iteration   2: 0,254 ms/op
# Warmup Iteration   3: 0,268 ms/op
Iteration   1: 0,238 ms/op
Iteration   2: 0,237 ms/op
Iteration   3: 0,241 ms/op
Iteration   4: 0,247 ms/op
Iteration   5: 0,233 ms/op
Iteration   6: 0,235 ms/op
Iteration   7: 0,233 ms/op
Iteration   8: 0,266 ms/op
Iteration   9: 0,239 ms/op
Iteration  10: 0,235 ms/op


Result "ru.spb.itmo.asashina.lab1.ext.hash.GetBenchmarkRunner.getThousandValues":
  0,236 ±(99.9%) 0,011 ms/op [Average]
  (min, avg, max) = (0,208, 0,236, 0,266), stdev = 0,012
  CI (99.9%): [0,225, 0,246] (assumes normal distribution)


# Run complete. Total time: 00:04:08

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                    Mode  Cnt     Score     Error  Units
GetBenchmarkRunner.getHundredThousandValues  avgt   20  4418,892 ± 222,759  ms/op
GetBenchmarkRunner.getTenThousandValues      avgt   20     0,243 ±   0,016  ms/op
GetBenchmarkRunner.getThousandValues         avgt   20     0,236 ±   0,011  ms/op

Process finished with exit code 0