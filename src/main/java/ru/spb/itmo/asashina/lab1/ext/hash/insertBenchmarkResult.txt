/Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java -javaagent:/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar=49809:/Applications/IntelliJ IDEA.app/Contents/bin -Dfile.encoding=UTF-8 -classpath /Users/a.sashina/IdeaProjects/distributed-algorithms/target/classes:/Users/a.sashina/.m2/repository/org/openjdk/jmh/jmh-core/1.37/jmh-core-1.37.jar:/Users/a.sashina/.m2/repository/net/sf/jopt-simple/jopt-simple/5.0.4/jopt-simple-5.0.4.jar:/Users/a.sashina/.m2/repository/org/apache/commons/commons-math3/3.6.1/commons-math3-3.6.1.jar:/Users/a.sashina/.m2/repository/org/openjdk/jmh/jmh-generator-annprocess/1.37/jmh-generator-annprocess-1.37.jar:/Users/a.sashina/.m2/repository/org/jeasy/easy-random-core/5.0.0/easy-random-core-5.0.0.jar:/Users/a.sashina/.m2/repository/org/objenesis/objenesis/3.1/objenesis-3.1.jar:/Users/a.sashina/.m2/repository/io/github/classgraph/classgraph/4.8.90/classgraph-4.8.90.jar ru.spb.itmo.asashina.lab1.ext.hash.InsertBenchmarkRunner
# JMH version: 1.37
# VM version: JDK 17.0.6, OpenJDK 64-Bit Server VM, 17.0.6+10
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -javaagent:/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar=49809:/Applications/IntelliJ IDEA.app/Contents/bin -Dfile.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: ru.spb.itmo.asashina.lab1.ext.hash.InsertBenchmarkRunner.insertFiveMillionsValues

# Run progress: 0,00% complete, ETA 00:01:57
# Warmup Fork: 1 of 1
# Warmup Iteration   1: 1433,871 ms/op
# Warmup Iteration   2: 1560,834 ms/op
# Warmup Iteration   3: 1745,153 ms/op
Iteration   1: 1596,724 ms/op
Iteration   2: 1896,556 ms/op
Iteration   3: 1756,353 ms/op
Iteration   4: 1545,269 ms/op
Iteration   5: 1492,695 ms/op
Iteration   6: 1847,837 ms/op
Iteration   7: 1396,562 ms/op
Iteration   8: 1539,098 ms/op
Iteration   9: 1503,116 ms/op
Iteration  10: 1554,209 ms/op

# Run progress: 11,11% complete, ETA 00:02:54
# Fork: 1 of 2
# Warmup Iteration   1: 1404,011 ms/op
# Warmup Iteration   2: 1464,520 ms/op
# Warmup Iteration   3: 1707,152 ms/op
Iteration   1: 1519,051 ms/op
Iteration   2: 1857,319 ms/op
Iteration   3: 1432,580 ms/op
Iteration   4: 1367,620 ms/op
Iteration   5: 1365,487 ms/op
Iteration   6: 1700,288 ms/op
Iteration   7: 1609,346 ms/op
Iteration   8: 1295,342 ms/op
Iteration   9: 1584,449 ms/op
Iteration  10: 1596,256 ms/op

# Run progress: 22,22% complete, ETA 00:02:29
# Fork: 2 of 2
# Warmup Iteration   1: 1317,142 ms/op
# Warmup Iteration   2: 1509,853 ms/op
# Warmup Iteration   3: 1459,380 ms/op
Iteration   1: 1526,218 ms/op
Iteration   2: 1788,371 ms/op
Iteration   3: 1651,589 ms/op
Iteration   4: 1501,241 ms/op
Iteration   5: 1347,782 ms/op
Iteration   6: 1571,127 ms/op
Iteration   7: 1415,656 ms/op
Iteration   8: 1494,357 ms/op
Iteration   9: 1534,211 ms/op
Iteration  10: 1523,631 ms/op


Result "ru.spb.itmo.asashina.lab1.ext.hash.InsertBenchmarkRunner.insertFiveMillionsValues":
  1534,096 ±(99.9%) 125,874 ms/op [Average]
  (min, avg, max) = (1295,342, 1534,096, 1857,319), stdev = 144,957
  CI (99.9%): [1408,222, 1659,970] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 17.0.6, OpenJDK 64-Bit Server VM, 17.0.6+10
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -javaagent:/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar=49809:/Applications/IntelliJ IDEA.app/Contents/bin -Dfile.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: ru.spb.itmo.asashina.lab1.ext.hash.InsertBenchmarkRunner.insertMillionValues

# Run progress: 33,33% complete, ETA 00:02:06
# Warmup Fork: 1 of 1
# Warmup Iteration   1: 257,089 ms/op
# Warmup Iteration   2: 251,333 ms/op
# Warmup Iteration   3: 283,676 ms/op
Iteration   1: 273,956 ms/op
Iteration   2: 255,231 ms/op
Iteration   3: 277,100 ms/op
Iteration   4: 252,537 ms/op
Iteration   5: 260,640 ms/op
Iteration   6: 258,667 ms/op
Iteration   7: 271,791 ms/op
Iteration   8: 284,838 ms/op
Iteration   9: 277,742 ms/op
Iteration  10: 262,298 ms/op

# Run progress: 44,44% complete, ETA 00:01:38
# Fork: 1 of 2
# Warmup Iteration   1: 240,180 ms/op
# Warmup Iteration   2: 248,690 ms/op
# Warmup Iteration   3: 277,115 ms/op
Iteration   1: 260,522 ms/op
Iteration   2: 280,237 ms/op
Iteration   3: 275,482 ms/op
Iteration   4: 254,036 ms/op
Iteration   5: 257,613 ms/op
Iteration   6: 256,117 ms/op
Iteration   7: 270,226 ms/op
Iteration   8: 299,435 ms/op
Iteration   9: 283,512 ms/op
Iteration  10: 259,042 ms/op

# Run progress: 55,56% complete, ETA 00:01:15
# Fork: 2 of 2
# Warmup Iteration   1: 249,002 ms/op
# Warmup Iteration   2: 256,319 ms/op
# Warmup Iteration   3: 272,226 ms/op
Iteration   1: 245,188 ms/op
Iteration   2: 278,120 ms/op
Iteration   3: 260,003 ms/op
Iteration   4: 239,923 ms/op
Iteration   5: 265,265 ms/op
Iteration   6: 265,104 ms/op
Iteration   7: 282,978 ms/op
Iteration   8: 263,728 ms/op
Iteration   9: 280,437 ms/op
Iteration  10: 269,488 ms/op


Result "ru.spb.itmo.asashina.lab1.ext.hash.InsertBenchmarkRunner.insertMillionValues":
  267,323 ±(99.9%) 12,443 ms/op [Average]
  (min, avg, max) = (239,923, 267,323, 299,435), stdev = 14,329
  CI (99.9%): [254,880, 279,765] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 17.0.6, OpenJDK 64-Bit Server VM, 17.0.6+10
# VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
# VM options: -javaagent:/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar=49809:/Applications/IntelliJ IDEA.app/Contents/bin -Dfile.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 1 s each
# Measurement: 10 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: ru.spb.itmo.asashina.lab1.ext.hash.InsertBenchmarkRunner.insertTenThousandValues

# Run progress: 66,67% complete, ETA 00:00:54
# Warmup Fork: 1 of 1
# Warmup Iteration   1: 0,782 ms/op
# Warmup Iteration   2: 0,596 ms/op
# Warmup Iteration   3: 0,569 ms/op
Iteration   1: 0,569 ms/op
Iteration   2: 0,582 ms/op
Iteration   3: 0,593 ms/op
Iteration   4: 0,572 ms/op
Iteration   5: 0,553 ms/op
Iteration   6: 0,573 ms/op
Iteration   7: 0,556 ms/op
Iteration   8: 0,563 ms/op
Iteration   9: 0,566 ms/op
Iteration  10: 0,595 ms/op

# Run progress: 77,78% complete, ETA 00:00:35
# Fork: 1 of 2
# Warmup Iteration   1: 0,764 ms/op
# Warmup Iteration   2: 0,623 ms/op
# Warmup Iteration   3: 0,637 ms/op
Iteration   1: 0,631 ms/op
Iteration   2: 0,637 ms/op
Iteration   3: 0,643 ms/op
Iteration   4: 0,623 ms/op
Iteration   5: 0,624 ms/op
Iteration   6: 0,661 ms/op
Iteration   7: 0,593 ms/op
Iteration   8: 0,640 ms/op
Iteration   9: 0,615 ms/op
Iteration  10: 0,615 ms/op

# Run progress: 88,89% complete, ETA 00:00:17
# Fork: 2 of 2
# Warmup Iteration   1: 0,699 ms/op
# Warmup Iteration   2: 0,604 ms/op
# Warmup Iteration   3: 0,568 ms/op
Iteration   1: 0,573 ms/op
Iteration   2: 0,565 ms/op
Iteration   3: 0,561 ms/op
Iteration   4: 0,606 ms/op
Iteration   5: 0,646 ms/op
Iteration   6: 0,659 ms/op
Iteration   7: 0,637 ms/op
Iteration   8: 0,582 ms/op
Iteration   9: 0,665 ms/op
Iteration  10: 0,683 ms/op


Result "ru.spb.itmo.asashina.lab1.ext.hash.InsertBenchmarkRunner.insertTenThousandValues":
  0,623 ±(99.9%) 0,030 ms/op [Average]
  (min, avg, max) = (0,561, 0,623, 0,683), stdev = 0,034
  CI (99.9%): [0,593, 0,653] (assumes normal distribution)


# Run complete. Total time: 00:02:31

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                       Mode  Cnt     Score     Error  Units
InsertBenchmarkRunner.insertFiveMillionsValues  avgt   20  1534,096 ± 125,874  ms/op
InsertBenchmarkRunner.insertMillionValues       avgt   20   267,323 ±  12,443  ms/op
InsertBenchmarkRunner.insertTenThousandValues   avgt   20     0,623 ±   0,030  ms/op

Process finished with exit code 0