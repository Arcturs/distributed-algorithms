/Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java -javaagent:/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar=52371:/Applications/IntelliJ IDEA.app/Contents/bin -Dfile.encoding=UTF-8 -classpath /Users/a.sashina/IdeaProjects/distributed-algorithms/target/classes:/Users/a.sashina/.m2/repository/org/openjdk/jmh/jmh-core/1.37/jmh-core-1.37.jar:/Users/a.sashina/.m2/repository/net/sf/jopt-simple/jopt-simple/5.0.4/jopt-simple-5.0.4.jar:/Users/a.sashina/.m2/repository/org/apache/commons/commons-math3/3.6.1/commons-math3-3.6.1.jar:/Users/a.sashina/.m2/repository/org/openjdk/jmh/jmh-generator-annprocess/1.37/jmh-generator-annprocess-1.37.jar:/Users/a.sashina/.m2/repository/org/jeasy/easy-random-core/5.0.0/easy-random-core-5.0.0.jar:/Users/a.sashina/.m2/repository/org/objenesis/objenesis/3.1/objenesis-3.1.jar:/Users/a.sashina/.m2/repository/io/github/classgraph/classgraph/4.8.90/classgraph-4.8.90.jar ru.spb.itmo.asashina.lab1.perf.hash.GetValueBenchmarkRunner
 # JMH version: 1.37
 # VM version: JDK 17.0.6, OpenJDK 64-Bit Server VM, 17.0.6+10
 # VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
 # VM options: -javaagent:/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar=52371:/Applications/IntelliJ IDEA.app/Contents/bin -Dfile.encoding=UTF-8
 # Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
 # Warmup: 3 iterations, 1 s each
 # Measurement: 10 iterations, 1 s each
 # Timeout: 10 min per iteration
 # Threads: 1 thread, will synchronize iterations
 # Benchmark mode: Average time, time/op
 # Benchmark: ru.spb.itmo.asashina.lab1.perf.hash.GetValueBenchmarkRunner.getHundredThousandRandomData

 # Run progress: 0,00% complete, ETA 00:01:57
 # Warmup Fork: 1 of 1
 # Warmup Iteration   1: 0,076 ms/op
 # Warmup Iteration   2: 0,071 ms/op
 # Warmup Iteration   3: 0,074 ms/op
 Iteration   1: 0,071 ms/op
 Iteration   2: 0,070 ms/op
 Iteration   3: 0,067 ms/op
 Iteration   4: 0,072 ms/op
 Iteration   5: 0,069 ms/op
 Iteration   6: 0,070 ms/op
 Iteration   7: 0,071 ms/op
 Iteration   8: 0,067 ms/op
 Iteration   9: 0,073 ms/op
 Iteration  10: 0,079 ms/op

 # Run progress: 11,11% complete, ETA 00:01:51
 # Fork: 1 of 2
 # Warmup Iteration   1: 0,084 ms/op
 # Warmup Iteration   2: 0,081 ms/op
 # Warmup Iteration   3: 0,073 ms/op
 Iteration   1: 0,071 ms/op
 Iteration   2: 0,069 ms/op
 Iteration   3: 0,073 ms/op
 Iteration   4: 0,069 ms/op
 Iteration   5: 0,072 ms/op
 Iteration   6: 0,072 ms/op
 Iteration   7: 0,070 ms/op
 Iteration   8: 0,068 ms/op
 Iteration   9: 0,068 ms/op
 Iteration  10: 0,068 ms/op

 # Run progress: 22,22% complete, ETA 00:01:37
 # Fork: 2 of 2
 # Warmup Iteration   1: 0,081 ms/op
 # Warmup Iteration   2: 0,072 ms/op
 # Warmup Iteration   3: 0,079 ms/op
 Iteration   1: 0,078 ms/op
 Iteration   2: 0,068 ms/op
 Iteration   3: 0,074 ms/op
 Iteration   4: 0,077 ms/op
 Iteration   5: 0,071 ms/op
 Iteration   6: 0,071 ms/op
 Iteration   7: 0,067 ms/op
 Iteration   8: 0,065 ms/op
 Iteration   9: 0,070 ms/op
 Iteration  10: 0,073 ms/op


 Result "ru.spb.itmo.asashina.lab1.perf.hash.GetValueBenchmarkRunner.getHundredThousandRandomData":
   0,071 ±(99.9%) 0,003 ms/op [Average]
   (min, avg, max) = (0,065, 0,071, 0,078), stdev = 0,003
   CI (99.9%): [0,068, 0,073] (assumes normal distribution)


 # JMH version: 1.37
 # VM version: JDK 17.0.6, OpenJDK 64-Bit Server VM, 17.0.6+10
 # VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
 # VM options: -javaagent:/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar=52371:/Applications/IntelliJ IDEA.app/Contents/bin -Dfile.encoding=UTF-8
 # Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
 # Warmup: 3 iterations, 1 s each
 # Measurement: 10 iterations, 1 s each
 # Timeout: 10 min per iteration
 # Threads: 1 thread, will synchronize iterations
 # Benchmark mode: Average time, time/op
 # Benchmark: ru.spb.itmo.asashina.lab1.perf.hash.GetValueBenchmarkRunner.getMillionRandomData

 # Run progress: 33,33% complete, ETA 00:01:23
 # Warmup Fork: 1 of 1
 # Warmup Iteration   1: 491,218 ms/op
 # Warmup Iteration   2: 470,023 ms/op
 # Warmup Iteration   3: 458,516 ms/op
 Iteration   1: 446,599 ms/op
 Iteration   2: 514,921 ms/op
 Iteration   3: 486,014 ms/op
 Iteration   4: 468,604 ms/op
 Iteration   5: 539,382 ms/op
 Iteration   6: 391,376 ms/op
 Iteration   7: 524,418 ms/op
 Iteration   8: 473,836 ms/op
 Iteration   9: 486,748 ms/op
 Iteration  10: 531,950 ms/op

 # Run progress: 44,44% complete, ETA 00:01:41
 # Fork: 1 of 2
 # Warmup Iteration   1: 501,999 ms/op
 # Warmup Iteration   2: 458,543 ms/op
 # Warmup Iteration   3: 471,847 ms/op
 Iteration   1: 450,428 ms/op
 Iteration   2: 399,668 ms/op
 Iteration   3: 447,363 ms/op
 Iteration   4: 458,328 ms/op
 Iteration   5: 469,615 ms/op
 Iteration   6: 413,595 ms/op
 Iteration   7: 537,652 ms/op
 Iteration   8: 490,918 ms/op
 Iteration   9: 474,769 ms/op
 Iteration  10: 530,027 ms/op

 # Run progress: 55,56% complete, ETA 00:01:37
 # Fork: 2 of 2
 # Warmup Iteration   1: 449,180 ms/op
 # Warmup Iteration   2: 485,603 ms/op
 # Warmup Iteration   3: 466,006 ms/op
 Iteration   1: 444,044 ms/op
 Iteration   2: 402,238 ms/op
 Iteration   3: 431,799 ms/op
 Iteration   4: 477,024 ms/op
 Iteration   5: 473,079 ms/op
 Iteration   6: 445,263 ms/op
 Iteration   7: 446,063 ms/op
 Iteration   8: 461,488 ms/op
 Iteration   9: 384,371 ms/op
 Iteration  10: 470,970 ms/op


 Result "ru.spb.itmo.asashina.lab1.perf.hash.GetValueBenchmarkRunner.getMillionRandomData":
   455,435 ±(99.9%) 33,885 ms/op [Average]
   (min, avg, max) = (384,371, 455,435, 537,652), stdev = 39,022
   CI (99.9%): [421,550, 489,320] (assumes normal distribution)


 # JMH version: 1.37
 # VM version: JDK 17.0.6, OpenJDK 64-Bit Server VM, 17.0.6+10
 # VM invoker: /Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home/bin/java
 # VM options: -javaagent:/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar=52371:/Applications/IntelliJ IDEA.app/Contents/bin -Dfile.encoding=UTF-8
 # Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
 # Warmup: 3 iterations, 1 s each
 # Measurement: 10 iterations, 1 s each
 # Timeout: 10 min per iteration
 # Threads: 1 thread, will synchronize iterations
 # Benchmark mode: Average time, time/op
 # Benchmark: ru.spb.itmo.asashina.lab1.perf.hash.GetValueBenchmarkRunner.getTenThousandRandomData

 # Run progress: 66,67% complete, ETA 00:01:20
 # Warmup Fork: 1 of 1
 # Warmup Iteration   1: 0,076 ms/op
 # Warmup Iteration   2: 0,072 ms/op
 # Warmup Iteration   3: 0,073 ms/op
 Iteration   1: 0,070 ms/op
 Iteration   2: 0,075 ms/op
 Iteration   3: 0,068 ms/op
 Iteration   4: 0,069 ms/op
 Iteration   5: 0,073 ms/op
 Iteration   6: 0,078 ms/op
 Iteration   7: 0,073 ms/op
 Iteration   8: 0,072 ms/op
 Iteration   9: 0,072 ms/op
 Iteration  10: 0,068 ms/op

 # Run progress: 77,78% complete, ETA 00:00:50
 # Fork: 1 of 2
 # Warmup Iteration   1: 0,077 ms/op
 # Warmup Iteration   2: 0,082 ms/op
 # Warmup Iteration   3: 0,069 ms/op
 Iteration   1: 0,070 ms/op
 Iteration   2: 0,078 ms/op
 Iteration   3: 0,070 ms/op
 Iteration   4: 0,070 ms/op
 Iteration   5: 0,071 ms/op
 Iteration   6: 0,071 ms/op
 Iteration   7: 0,069 ms/op
 Iteration   8: 0,070 ms/op
 Iteration   9: 0,071 ms/op
 Iteration  10: 0,071 ms/op

 # Run progress: 88,89% complete, ETA 00:00:23
 # Fork: 2 of 2
 # Warmup Iteration   1: 0,072 ms/op
 # Warmup Iteration   2: 0,069 ms/op
 # Warmup Iteration   3: 0,074 ms/op
 Iteration   1: 0,083 ms/op
 Iteration   2: 0,081 ms/op
 Iteration   3: 0,078 ms/op
 Iteration   4: 0,077 ms/op
 Iteration   5: 0,073 ms/op
 Iteration   6: 0,069 ms/op
 Iteration   7: 0,070 ms/op
 Iteration   8: 0,073 ms/op
 Iteration   9: 0,069 ms/op
 Iteration  10: 0,070 ms/op


 Result "ru.spb.itmo.asashina.lab1.perf.hash.GetValueBenchmarkRunner.getTenThousandRandomData":
   0,073 ±(99.9%) 0,004 ms/op [Average]
   (min, avg, max) = (0,069, 0,073, 0,083), stdev = 0,004
   CI (99.9%): [0,069, 0,076] (assumes normal distribution)


 # Run complete. Total time: 00:03:23

 REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
 why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
 experiments, perform baseline and negative tests that provide experimental control, make sure
 the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
 Do not assume the numbers tell you what you want them to tell.

 NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
 extra caution when trusting the results, look into the generated code to check the benchmark still
 works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
 different JVMs are already problematic, the performance difference caused by different Blackhole
 modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

 Benchmark                                             Mode  Cnt    Score    Error  Units
 GetValueBenchmarkRunner.getHundredThousandRandomData  avgt   20    0,071 ±  0,003  ms/op
 GetValueBenchmarkRunner.getMillionRandomData          avgt   20  455,435 ± 33,885  ms/op
 GetValueBenchmarkRunner.getTenThousandRandomData      avgt   20    0,073 ±  0,004  ms/op

 Process finished with exit code 0